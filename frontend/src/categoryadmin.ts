// üìÇ src/categoryadmin.ts

interface Category {
  id: number;
  name: string;
  parentCategory?: string;
  description: string;
  productCount: number;
  status: string;
  iconUrl: string;
}

class CategoryService {
  private static BASE_URL = "http://localhost:3000/categories";

  static async getCategories(): Promise<Category[]> {
      const response = await fetch(`${this.BASE_URL}/category`);
      return response.json();
  }

  static async getCategoryById(id: number): Promise<Category> {
      const response = await fetch(`${this.BASE_URL}/${id}`);
      return response.json();
  }

  static async createCategory(category: Partial<Category>) {
      await fetch(`${this.BASE_URL}/add`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(category),
      });
  }

  static async updateCategory(id: number, category: Partial<Category>) {
      await fetch(`${this.BASE_URL}/update/${id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(category),
      });
  }

  static async deleteCategory(id: number) {
      await fetch(`${this.BASE_URL}/delete/${id}`, {
          method: "DELETE",
      });
  }
}

// üìå Hi·ªÉn th·ªã danh m·ª•c trong b·∫£ng
async function renderCategories() {
  const tableBody = document.getElementById("categoryTableBody")!;
  tableBody.innerHTML = "";
  const categories = await CategoryService.getCategories();

  categories.forEach((category) => {
      const row = document.createElement("tr");
      row.innerHTML = `
          <td><img src="${category.iconUrl}" class="category-icon" alt="${category.name}"></td>
          <td>${category.name}</td>
          <td>${category.parentCategory || "-"}</td>
         <td>${category.description}</td>
          <td>${category.productCount}</td>
          <td><span class="badge bg-${category.status === "Active" ? "success" : "danger"}">${category.status}</span></td>
          <td>
              <button class="btn btn-warning btn-sm edit-btn" data-id="${category.id}" data-bs-toggle="modal" data-bs-target="#editCategoryModal">
                  <i class="fas fa-edit"></i>
              </button>
              <button class="btn btn-danger btn-sm delete-btn" data-id="${category.id}">
                  <i class="fas fa-trash"></i>
              </button>
          </td>
      `;
      tableBody.appendChild(row);
  });
}

// üìå X·ª≠ l√Ω th√™m danh m·ª•c
document.getElementById("saveNewCategory")!.addEventListener("click", async () => {
  await CategoryService.createCategory({
      name: (document.getElementById("addCategoryName") as HTMLInputElement).value,
      description: (document.getElementById("addCategoryDescription") as HTMLTextAreaElement).value,
      status: (document.getElementById("addCategoryStatus") as HTMLSelectElement).value,
  });
  renderCategories();
});

// üìå Load d·ªØ li·ªáu v√†o modal ch·ªânh s·ª≠a (S·ª≠a l·ªói kh√¥ng hi·ªÉn th·ªã)
// üìå Load d·ªØ li·ªáu v√†o modal ch·ªânh s·ª≠a
document.getElementById("categoryTableBody")!.addEventListener("click", async (event) => {
  const target = event.target as HTMLElement;
  const editButton = target.closest(".edit-btn") as HTMLButtonElement;
  if (editButton) {
      const id = Number(editButton.dataset.id);

      try {
          let category = await CategoryService.getCategoryById(id);

          // üõ† N·∫øu API tr·∫£ v·ªÅ m·ªôt m·∫£ng, l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
          if (Array.isArray(category)) {
              category = category.length > 0 ? category[0] : undefined;
          }

          // üõ† Ki·ªÉm tra n·∫øu category b·ªã undefined ho·∫∑c kh√¥ng c√≥ ID (Fix l·ªói API)
          if (!category || typeof category.id === "undefined") {
              alert("‚ö†Ô∏è Danh m·ª•c kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.");
              console.error("L·ªói: D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá:", category);
              return;
          }

          // üõ† G√°n d·ªØ li·ªáu v√†o modal
          (document.getElementById("editCategoryId") as HTMLInputElement).value = category.id.toString();
          (document.getElementById("editCategoryName") as HTMLInputElement).value = category.name || "";
          (document.getElementById("editCategoryDescription") as HTMLTextAreaElement).value = category.description || "";
          (document.getElementById("editCategoryStatus") as HTMLSelectElement).value = category.status || "Inactive";

          // üõ† Load danh m·ª•c cha
          const parentSelect = document.getElementById("editParentCategory") as HTMLSelectElement;
          parentSelect.innerHTML = `<option value="">None (Top Level)</option>`;
          const categories = await CategoryService.getCategories();
          categories.forEach(cat => {
              if (cat.id !== category.id) {
                  const option = document.createElement("option");
                  option.value = cat.id.toString();
                  option.textContent = cat.name;
                  if (cat.id.toString() === category.parentCategory) {
                      option.selected = true;
                  }
                  parentSelect.appendChild(option);
              }
          });

          // üõ† ƒê·∫£m b·∫£o n√∫t Save c·∫≠p nh·∫≠t danh m·ª•c ƒë√∫ng ID
          document.getElementById("saveEditedCategory")!.onclick = async () => {
              await updateCategory(id);
          };

      } catch (error) {
          console.error("L·ªói khi t·∫£i danh m·ª•c:", error);
          alert("‚ö†Ô∏è L·ªói t·∫£i danh m·ª•c. H√£y th·ª≠ l·∫°i!");
      }
  }
});



// üìå C·∫≠p nh·∫≠t danh m·ª•c khi nh·∫•n Save
async function updateCategory(id: number) {
  const updatedCategory: Partial<Category> = {
      name: (document.getElementById("editCategoryName") as HTMLInputElement).value,
      description: (document.getElementById("editCategoryDescription") as HTMLTextAreaElement).value,
      status: (document.getElementById("editCategoryStatus") as HTMLSelectElement).value,
      parentCategory: (document.getElementById("editParentCategory") as HTMLSelectElement).value || undefined, // üî• FIX l·ªói null
  };

  await CategoryService.updateCategory(id, updatedCategory);
  renderCategories();
  (document.querySelector("#editCategoryModal .btn-close") as HTMLButtonElement).click();
}

// üìå X√≥a danh m·ª•c
document.getElementById("categoryTableBody")!.addEventListener("click", async (event) => {
  const target = event.target as HTMLElement;
  const deleteButton = target.closest(".delete-btn") as HTMLButtonElement;
  if (deleteButton) {
      const id = Number(deleteButton.dataset.id);
      if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a danh m·ª•c n√†y?")) {
          await CategoryService.deleteCategory(id);
          renderCategories();
      }
  }
});

// üìå Ch·∫°y h√†m render khi load trang
document.addEventListener("DOMContentLoaded", renderCategories);
