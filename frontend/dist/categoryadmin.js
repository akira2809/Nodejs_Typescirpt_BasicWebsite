"use strict";
// üìÇ src/categoryadmin.ts
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class CategoryService {
    static getCategories() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(`${this.BASE_URL}/category`);
            return response.json();
        });
    }
    static getCategoryById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(`${this.BASE_URL}/${id}`);
            return response.json();
        });
    }
    static createCategory(category) {
        return __awaiter(this, void 0, void 0, function* () {
            yield fetch(`${this.BASE_URL}/add`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(category),
            });
        });
    }
    static updateCategory(id, category) {
        return __awaiter(this, void 0, void 0, function* () {
            yield fetch(`${this.BASE_URL}/update/${id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(category),
            });
        });
    }
    static deleteCategory(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield fetch(`${this.BASE_URL}/delete/${id}`, {
                method: "DELETE",
            });
        });
    }
}
CategoryService.BASE_URL = "http://localhost:3000/categories";
// üìå Hi·ªÉn th·ªã danh m·ª•c trong b·∫£ng
function renderCategories() {
    return __awaiter(this, void 0, void 0, function* () {
        const tableBody = document.getElementById("categoryTableBody");
        tableBody.innerHTML = "";
        const categories = yield CategoryService.getCategories();
        categories.forEach((category) => {
            const row = document.createElement("tr");
            row.innerHTML = `
          <td>${category.name}</td>
          <td>
              <button class="btn btn-warning btn-sm edit-btn" data-id="${category.id}" data-bs-toggle="modal" data-bs-target="#editCategoryModal">
                  <i class="fas fa-edit"></i>
              </button>
              <button class="btn btn-danger btn-sm delete-btn" data-id="${category.id}">
                  <i class="fas fa-trash"></i>
              </button>
          </td>
      `;
            tableBody.appendChild(row);
        });
    });
}
// üìå X·ª≠ l√Ω th√™m danh m·ª•c
document.getElementById("saveNewCategory").addEventListener("click", () => __awaiter(void 0, void 0, void 0, function* () {
    yield CategoryService.createCategory({
        name: document.getElementById("addCategoryName").value,
        description: document.getElementById("addCategoryDescription").value,
        status: document.getElementById("addCategoryStatus").value,
    });
    renderCategories();
}));
// üìå Load d·ªØ li·ªáu v√†o modal ch·ªânh s·ª≠a (S·ª≠a l·ªói kh√¥ng hi·ªÉn th·ªã)
// üìå Load d·ªØ li·ªáu v√†o modal ch·ªânh s·ª≠a
document.getElementById("categoryTableBody").addEventListener("click", (event) => __awaiter(void 0, void 0, void 0, function* () {
    const target = event.target;
    const editButton = target.closest(".edit-btn");
    if (editButton) {
        const id = Number(editButton.dataset.id);
        try {
            let category = yield CategoryService.getCategoryById(id);
            // üõ† N·∫øu API tr·∫£ v·ªÅ m·ªôt m·∫£ng, l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
            if (Array.isArray(category)) {
                category = category.length > 0 ? category[0] : undefined;
            }
            // üõ† Ki·ªÉm tra n·∫øu category b·ªã undefined ho·∫∑c kh√¥ng c√≥ ID (Fix l·ªói API)
            if (!category || typeof category.id === "undefined") {
                alert("‚ö†Ô∏è Danh m·ª•c kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.");
                console.error("L·ªói: D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá:", category);
                return;
            }
            // üõ† G√°n d·ªØ li·ªáu v√†o modal
            document.getElementById("editCategoryId").value = category.id.toString();
            document.getElementById("editCategoryName").value = category.name || "";
            document.getElementById("editCategoryDescription").value = category.description || "";
            document.getElementById("editCategoryStatus").value = category.status || "Inactive";
            // üõ† Load danh m·ª•c cha
            const parentSelect = document.getElementById("editParentCategory");
            parentSelect.innerHTML = `<option value="">None (Top Level)</option>`;
            const categories = yield CategoryService.getCategories();
            categories.forEach(cat => {
                if (cat.id !== category.id) {
                    const option = document.createElement("option");
                    option.value = cat.id.toString();
                    option.textContent = cat.name;
                    if (cat.id.toString() === category.parentCategory) {
                        option.selected = true;
                    }
                    parentSelect.appendChild(option);
                }
            });
            // üõ† ƒê·∫£m b·∫£o n√∫t Save c·∫≠p nh·∫≠t danh m·ª•c ƒë√∫ng ID
            document.getElementById("saveEditedCategory").onclick = () => __awaiter(void 0, void 0, void 0, function* () {
                yield updateCategory(id);
            });
        }
        catch (error) {
            console.error("L·ªói khi t·∫£i danh m·ª•c:", error);
            alert("‚ö†Ô∏è L·ªói t·∫£i danh m·ª•c. H√£y th·ª≠ l·∫°i!");
        }
    }
}));
// üìå C·∫≠p nh·∫≠t danh m·ª•c khi nh·∫•n Save
function updateCategory(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const updatedCategory = {
            name: document.getElementById("editCategoryName").value,
            description: document.getElementById("editCategoryDescription").value,
            status: document.getElementById("editCategoryStatus").value,
            parentCategory: document.getElementById("editParentCategory").value || undefined, // üî• FIX l·ªói null
        };
        yield CategoryService.updateCategory(id, updatedCategory);
        renderCategories();
        document.querySelector("#editCategoryModal .btn-close").click();
    });
}
// üìå X√≥a danh m·ª•c
document.getElementById("categoryTableBody").addEventListener("click", (event) => __awaiter(void 0, void 0, void 0, function* () {
    const target = event.target;
    const deleteButton = target.closest(".delete-btn");
    if (deleteButton) {
        const id = Number(deleteButton.dataset.id);
        if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a danh m·ª•c n√†y?")) {
            yield CategoryService.deleteCategory(id);
            renderCategories();
        }
    }
}));
// üìå Ch·∫°y h√†m render khi load trang
document.addEventListener("DOMContentLoaded", renderCategories);
