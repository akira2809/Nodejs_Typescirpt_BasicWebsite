const Order = require('../models/order.model');
const { OrderItem } = require('../models/orderitem.model');
const { createPayment } = require('../services/payosService');

exports.createOrder = async (req, res) => {
    try {
        const { user_id, total_amount, items } = req.body;

        if (!user_id || !total_amount || !Array.isArray(items) || items.length === 0) {
            return res.status(400).json({ error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
        }

        // 1Ô∏è‚É£ T·∫°o ƒë∆°n h√†ng trong DB
        const orderId = await Order.createOrder(user_id, total_amount);
        const orderCode = Number(orderId); // Chuy·ªÉn orderId th√†nh s·ªë

        // Ki·ªÉm tra orderCode c√≥ h·ª£p l·ªá kh√¥ng
        if (!Number.isInteger(orderCode) || orderCode <= 0 || orderCode > 9007199254740991) {
            return res.status(400).json({ error: "M√£ ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
        }

        // 2Ô∏è‚É£ L∆∞u s·∫£n ph·∫©m v√†o order_items
        await Promise.all(items.map(item =>
            OrderItem.addOrderItem(orderId, item.product_id, item.quantity, item.price)
        ));

        // 3Ô∏è‚É£ G·ªçi PayOS ƒë·ªÉ t·∫°o thanh to√°n
        const paymentData = {
            orderCode,  // Gi·ªØ nguy√™n d·∫°ng s·ªë
            amount: Math.round(total_amount), // ƒê·∫£m b·∫£o amount l√† s·ªë nguy√™n
            description: `Thanh to√°n ƒë∆°n h√†ng #${orderCode}`,
            returnUrl: "http://127.0.0.1:5501/frontend/html/index.html",
            cancelUrl: "http://127.0.0.1:5501/frontend/html/ProductbyCate.html?category=1",
        };

        console.log("üõ† Debug - G·ª≠i d·ªØ li·ªáu ƒë·∫øn PayOS:", JSON.stringify(paymentData, null, 2));
        const paymentResponse = await createPayment(paymentData);

        if (paymentResponse.checkoutUrl) {
            res.status(201).json({
                message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng",
                order_id: orderId,
                payment_url: paymentResponse.checkoutUrl
            });
        } else {
            res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o thanh to√°n PayOS" });
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
        res.status(500).json({ error: "L·ªói server khi t·∫°o ƒë∆°n h√†ng" });
    }
};

exports.getOrderDetails = async (req, res) => {
    try {
        const orderId = req.params.id;

        if (!orderId) {
            return res.status(400).json({ error: 'Thi·∫øu order ID' });
        }

        // 1Ô∏è‚É£ L·∫•y th√¥ng tin ƒë∆°n h√†ng
        const order = await Order.getOrderById(orderId);
        if (!order) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        }

        // 2Ô∏è‚É£ L·∫•y danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng
        const items = await OrderItem.getItemsByOrderId(orderId);
        if (!items || items.length === 0) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong ƒë∆°n h√†ng' });
        }

        return res.json({ order, items });
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:', error);
        return res.status(500).json({ error: 'L·ªói server khi l·∫•y ƒë∆°n h√†ng' });
    }
};
